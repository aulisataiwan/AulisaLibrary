// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AUOximeter
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AUOximeter
import CoreBluetooth
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class AUOximeterData {
  public var PR: Swift.Int {
    get
  }
  public var SpO2: Swift.Int {
    get
  }
  public var PA: Swift.Double {
    get
  }
  public var motionCount: Swift.Int {
    get
  }
  public var batteryStatus: BatteryStatus {
    get
  }
  public var systemState: Swift.Int {
    get
  }
  public var isMotionData: Swift.Bool {
    get
  }
  public var rValue: Swift.Double {
    get
  }
  public var redGain: Swift.Int {
    get
  }
  public var irGain: Swift.Int {
    get
  }
  public var redCurrent: Swift.Int {
    get
  }
  public var irCurrent: Swift.Int {
    get
  }
  public init()
  public init(spo2: Swift.Int, pr: Swift.Int, pa: Swift.Double, status: Swift.Int, motion: Swift.Int, alarm: Swift.Int)
  public func set(rawData: [Swift.CUnsignedChar]) -> Swift.Bool
  public func isInvalidData() -> Swift.Bool
  public func isPowerOff() -> Swift.Bool
  public func isSensorOff() -> Swift.Bool
  public func isFingerOff() -> Swift.Bool
  public func isPositionWrong() -> Swift.Bool
  public func isSpo2High() -> Swift.Bool
  public func isSpo2Low() -> Swift.Bool
  public func isPrHigh() -> Swift.Bool
  public func isPrLow() -> Swift.Bool
  public func isNoneValueData() -> Swift.Bool
  public func clear()
  @objc deinit
}
public class AUOximeterAlarmLimit : Swift.Equatable {
  public static func == (lhs: AUOximeterAlarmLimit, rhs: AUOximeterAlarmLimit) -> Swift.Bool
  public var spo2High: Swift.Int?
  public var spo2Low: Swift.Int?
  public var prHigh: Swift.Int?
  public var prLow: Swift.Int?
  public var sensorType: AUSensorType
  public init(sensorType: AUSensorType)
  public func isAlarmMute() -> Swift.Bool
  public static func set(rawData: [Swift.CUnsignedChar], macAddress: Swift.String) -> AUOximeterAlarmLimit?
  @objc deinit
}
extension AUOximeterAlarmLimit {
  public static let DEFAULT_SPO2_MAX: Swift.Int
  public static let DEFAULT_SPO2_MIN: Swift.Int
  public static func DEFAULT_PR_MAX(sensorType: AUSensorType) -> Swift.Int
  public static func DEFAULT_PR_MIN(sensorType: AUSensorType) -> Swift.Int
  public static let DEFAULT_SPO2_MAX_HI: Swift.Int
  public static let DEFAULT_SPO2_MAX_LO: Swift.Int
  public static let DEFAULT_SPO2_MIN_HI: Swift.Int
  public static let DEFAULT_SPO2_MIN_LO: Swift.Int
  public static func DEFAULT_PR_MAX_HI(sensorType: AUSensorType) -> Swift.Int
  public static let DEFAULT_PR_MAX_LO: Swift.Int
  public static func DEFAULT_PR_MIN_HI(sensorType: AUSensorType) -> Swift.Int
  public static let DEFAULT_PR_MIN_LO: Swift.Int
  public static func defaultAlarm(sensorType: AUSensorType) -> AUOximeterAlarmLimit
  public static func stringToAlarmLimit(_ alarmString: Swift.String) -> AUOximeterAlarmLimit?
}
public class AUOximeterRawData {
  public static let WAVE_FORM_RED: Swift.Int
  public static let WAVE_FORM_IR: Swift.Int
  public var redList: [Swift.Int] {
    get
  }
  public var irList: [Swift.Int] {
    get
  }
  public static func getWaveFormLabel(type: Swift.Int) -> Swift.String
  public init(data: [Swift.Int])
  public func toArrayList(waveFormType: Swift.Int) -> [Swift.Int]
  public func getCount(waveFormType: Swift.Int) -> Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AUDevice : ObjectiveC.NSObject {
  public static func macAddressToSMType(macAddress: Swift.String) -> AUSensorType
  public static func macAddressToSMGeneration(macAddress: Swift.String) -> AUSensorGeneration
  @objc override dynamic public init()
  @objc deinit
}
public enum BLEStatus : Swift.Int {
  case None
  case Connected
  case Disconnected
  case Connecting
  case Removed
  case NotFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SystemStatus {
  case Off
  case On
  case Init
  case Sleep
  public static func == (a: SystemStatus, b: SystemStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BatteryStatus : Swift.Int {
  case High
  case Low
  case Empty
  case Full
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AUSensorType : Swift.Int {
  case None
  case Oxi1000
  case Oxi1001
  case Temp
  case ECG
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AUSensorGeneration : Swift.Int {
  case None
  case First
  case First_v2
  case Second
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AUProbeType : Swift.Int {
  case None
  case Infant
  case Pediatric
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class AUTemperatureData {
  public static let SCALE_CELSIUS: Swift.Int
  public static let SCALE_FAHRENHEIT: Swift.Int
  public static let TEMP_DATA_SCALE: Swift.Double
  public static let RANGE_HI: Swift.Double
  public static let RANGE_LO: Swift.Double
  public var temperature: Swift.Double {
    get
  }
  public var batteryStatus: BatteryStatus {
    get
  }
  public var systemState: Swift.Int {
    get
  }
  public var scale: Swift.Int
  public init()
  public init(temperature: Swift.Double, status: Swift.Int, alarm: Swift.Int)
  public func set(rawData: [Swift.CUnsignedChar]) -> Swift.Bool
  public func isInvalidData() -> Swift.Bool
  public func isTempHigh() -> Swift.Bool
  public func isTempLow() -> Swift.Bool
  public func isTempOutOfDisplayRange() -> Swift.Bool
  public var getValueOfTemperature: Swift.String {
    get
  }
  public var getValueOfScale: Swift.String {
    get
  }
  public func clear()
  public func toString() -> Swift.String
  public func toLogString() -> Swift.String
  @objc deinit
}
public class AUTemperatureAlarmLimit {
  public var tempHigh: Swift.Double?
  public var tempLow: Swift.Double?
  public var macAddress: Swift.String {
    get
  }
  public init()
  public func isAlarmMute() -> Swift.Bool
  @objc deinit
}
extension AUTemperatureAlarmLimit {
  public static func DEFAULT_TEMP_MAX(type: AUSensorType) -> Swift.Double
  public static func DEFAULT_TEMP_MIN(type: AUSensorType) -> Swift.Double
  public static let DEFAULT_TEMP_MAX_HI: Swift.Double
  public static let DEFAULT_TEMP_MAX_LO: Swift.Double
  public static let DEFAULT_TEMP_MIN_HI: Swift.Double
  public static let DEFAULT_TEMP_MIN_LO: Swift.Double
  public static func defaultAlarm(sensorType: AUSensorType) -> AUTemperatureAlarmLimit
}
extension AUTemperatureAlarmLimit {
  public func eqauls(_ newAlarm: AUTemperatureAlarmLimit) -> Swift.Bool
}
extension AUTemperatureAlarmLimit {
  public static func stringToAlarmLimit(_ alarmString: Swift.String) -> AUTemperatureAlarmLimit?
}
@objc public class AUThermometer : AUDevice {
  public static let UUID_S_Aulisa: Swift.String
  public static let UUID_C_Write: Swift.String
  public static let UUID_C_Notify: Swift.String
  public var macAddress: Swift.String! {
    get
  }
  public var pheripheral: CoreBluetooth.CBPeripheral? {
    get
  }
  public var alarmLimit: AUTemperatureAlarmLimit! {
    get
  }
  public var delegate: (any AUThermometerDataDelegate)?
  public var version: Swift.String {
    get
  }
  public init(peripheral: CoreBluetooth.CBPeripheral, macAddress: Swift.String)
  @objc deinit
  public func isConnected() -> Swift.Bool
  public func setAlarmLimit(alarmLimit: AUTemperatureAlarmLimit)
  public func currentData() -> AUTemperatureData?
  public func setScale(_ scale: Swift.Int)
}
public protocol AUThermometerDataDelegate {
  func didSMConnect(device: AUThermometer)
  func notifyInfo(device: AUThermometer, info: AUTemperatureData)
  func notifyAlarmLimit(device: AUThermometer, alarmLimit: AUTemperatureAlarmLimit)
}
@objc public class AUOximeter : AUDevice {
  public static let UUID_S_Aulisa: Swift.String
  public static let UUID_C_Write: Swift.String
  public static let UUID_C_Notify: Swift.String
  public var macAddress: Swift.String! {
    get
  }
  public var pheripheral: CoreBluetooth.CBPeripheral? {
    get
  }
  public var alarmLimit: AUOximeterAlarmLimit! {
    get
  }
  public var sensorType: AUSensorType! {
    get
  }
  public var sensorGeneration: AUSensorGeneration! {
    get
  }
  public var delegate: (any AUOximeterDataDelegate)?
  public var version: Swift.String {
    get
  }
  public var probeType: AUProbeType! {
    get
  }
  public init(peripheral: CoreBluetooth.CBPeripheral, macAddress: Swift.String, probeType: AUProbeType = .None)
  @objc deinit
  public func isConnected() -> Swift.Bool
  public func isPowerOff() -> Swift.Bool
  public func setAlarmLimit(alarmLimit: AUOximeterAlarmLimit)
  public func setProbeType(_ type: AUProbeType)
  public func getOxi1001Info(type: AUProbeType = .None)
  public func stopOxi1001Info()
  public func getRawData()
  public func stopRawData()
  public func currentData() -> AUOximeterData?
}
public protocol AUOximeterDataDelegate {
  func didSMConnect(device: AUOximeter)
  func didSMPowerOff(device: AUOximeter)
  func notifyInfo(device: AUOximeter, info: AUOximeterData)
  func notifyAlarmLimit(device: AUOximeter, alarmLimit: AUOximeterAlarmLimit)
  func notifyRawData(device: AUOximeter, rawData: AUOximeterRawData)
}
extension BLEStatus : Swift.Equatable {}
extension BLEStatus : Swift.Hashable {}
extension BLEStatus : Swift.RawRepresentable {}
extension SystemStatus : Swift.Equatable {}
extension SystemStatus : Swift.Hashable {}
extension BatteryStatus : Swift.Equatable {}
extension BatteryStatus : Swift.Hashable {}
extension BatteryStatus : Swift.RawRepresentable {}
extension AUSensorType : Swift.Equatable {}
extension AUSensorType : Swift.Hashable {}
extension AUSensorType : Swift.RawRepresentable {}
extension AUSensorGeneration : Swift.Equatable {}
extension AUSensorGeneration : Swift.Hashable {}
extension AUSensorGeneration : Swift.RawRepresentable {}
extension AUProbeType : Swift.Equatable {}
extension AUProbeType : Swift.Hashable {}
extension AUProbeType : Swift.RawRepresentable {}
